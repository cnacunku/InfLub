#include <iostream>
#include <cmath>

using namespace std;

// Функция F(x) = 2*ln^2(x) + 2x^2 - 3
double F(double x) {
    return 2 * pow(log(x), 2) + 2 * x * x - 3;
}

double D(double x) {
    return (4 * log(x)) / x + 4 * x;
}

// Новая функция g(x) для метода простых итераций
double g(double x) {
    return x-F(x)/D(x);
}

int main() {
    double a = 1.0, b = 1.5; // Отрезок
    double eps = 0.0001;      // Точность
    int N = 1000;             // Максимальное число итераций

    // Проверка условия F(a)*F(b) < 0
    if (F(a) * F(b) >= 0) {
        cout << "На отрезке [" << a << ", " << b << "] корней нет или функция имеет одинаковые знаки на концах." << endl;
        return 0;
    }

    double x0 = a;
    double x;
    int n = 0;

    // Метод простых итераций
    cout << "Итерации:" << endl;
    do {
        x = g(x0);
        n++;

        cout << "n = " << n << ", x = " << x << ", F(x) = " << F(x) << endl;

        // Проверка на сходимость
        if (fabs(x - x0) <= eps) {
            break;
        }

        // Проверка на превышение максимального числа итераций
        if (n >= N) {
            cout << "Достигнуто максимальное число итераций (" << N << ")." << endl;
            break;
        }

        x0 = x;
    } while (true);

    // Вывод результатов
    cout << "\nРезультат:" << endl;
    cout << "Приближенный корень: " << x << endl;
    cout << "Значение функции F(x): " << F(x) << endl;
    cout << "Количество итераций: " << n << endl;

    return 0;
}
