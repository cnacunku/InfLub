#include <iostream>
#include <cmath>
#include <iomanip>
#include <locale>

using namespace std;

// Исходная функция
double f(double x) {
    return 2 * pow(log(x), 2) + 2 * pow(x, 2) - 3;
}

// Первая производная функции
double f1(double x) {
    return (4 * log(x)) / x + 4 * x;
}

// Вторая производная функции
double f2(double x) {
    return (2 - 2 * log(x)) / (x * x) + 4;
}

// Функция g(x) для метода простых итераций
double g(double x) {
    return x - f(x) / f1(x);
}

// Метод дихотомии
void bisection(double a, double b, double eps) {
    if (f(a) * f(b) >= 0) {
        cout << "На отрезке [" << a << ", " << b << "] метод дихотомии не выявил корней\n";
        return;
    }

    double c;
    int iter = 0;

    while (fabs(b - a) > eps) {
        c = (a + b) / 2;
        iter++;

        if (f(c) == 0.0) {
            break;
        }
        else if (f(c) * f(a) < 0) {
            b = c;
        }
        else {
            a = c;
        }
    }

    double root = (a + b) / 2;
    cout << "Метод дихотомии:\n";
    cout << "Корень: " << setprecision(8) << root << endl;
    cout << "Функция в найденном значении x: " << f(root) << endl;
    cout << "Итераций: " << iter << endl << endl;
}

// Метод хорд
void chord(double a, double b, double eps) {
    if (f(a) * f(b) >= 0) {
        cout << "На отрезке [" << a << ", " << b << "] метод хорд не выявил корней\n";
        return;
    }

    double x, z, h;
    int iter = 0;

    // Выбираем неподвижную точку
    if (f(a) * f2(a) > 0) {
        x = b;
        z = a;
    }
    else {
        x = a;
        z = b;
    }

    do {
        h = (x - z) / (f(x) - f(z)) * f(x);
        x = x - h;
        iter++;
    } while (fabs(h) > eps);

    cout << "Метод хорд:\n";
    cout << "Корень: " << setprecision(8) << x << endl;
    cout << "Функция в найденном значении x: " << f(x) << endl;
    cout << "Итераций: " << iter << endl << endl;
}

// Метод Ньютона (касательных)
void newtonMethod(double a, double b, double eps) {
    // Проверка условий сходимости
    if (f(a) * f(b) >= 0) {
        cout << "На отрезке [" << a << ", " << b << "] метод Ньютона не выявил корней\n";
        return;
    }

    double x, h;
    int iter = 0;

    // Выбор начального приближения
    if (f(b) * f2(b) > 0) {
        x = b;
    }
    else {
        x = a;
    }

    do {
        double fx = f(x);
        double dfx = f1(x);

        if (fabs(dfx) < 1e-10) {
            cout << "Производная близка к нулю. Метод расходится.\n";
            return;
        }

        h = fx / dfx;
        x = x - h;
        iter++;

    } while (fabs(h) > eps && iter < 1000);

    cout << "Метод Ньютона:\n";
    cout << "Корень: " << setprecision(8) << x << endl;
    cout << "Функция в найденном значении x: " << f(x) << endl;
    cout << "Итераций: " << iter << endl << endl;
}

// Метод простых итераций
double prostiter(double a, double b, double eps) {
    // Проверка условия F(a)*F(b) < 0
    if (f(a) * f(b) >= 0) {
        cout << "На отрезке [" << a << ", " << b << "] метод простых итераций не выявил корней" << endl;
        return 0;
    }

    double x0 = a;
    double x;
    int iter = 0;

    // Метод простых итераций
    cout << "Итерации:" << endl;
    do {
        x = g(x0);
        iter++;

        // Проверка на сходимость
        if (fabs(x - x0) <= eps) {
            break;
        }

        x0 = x;
    } while (true);

    cout << "Метод простых итераций:\n";
    cout << "Корень: " << setprecision(8) << x << endl;
    cout << "Функция в найденном значении x: " << f(x) << endl;
    cout << "Итераций: " << iter << endl << endl;
}

// Метод секущих
void secantMethod(double a, double b, double eps) {
    if (f(a) * f(b) >= 0) {
        cout << "На отрезке [" << a << ", " << b << "] метод секущих не выявил корней\n";
        return;
    }

    double x0 = a;
    double x1 = b;
    double x2;
    int iter = 0;

    do {
        if (fabs(f(x1) - f(x0)) < 1e-10) {
            cout << "Метод секущих: разница значений функции слишком мала\n";
            return;
        }

        x2 = x1 - f(x1) * (x1 - x0) / (f(x1) - f(x0));
        x0 = x1;
        x1 = x2;
        iter++;
    } while (fabs(f(x2)) > eps && iter < 1000);

    cout << "Метод секущих:\n";
    cout << "Корень: " << setprecision(8) << x2 << endl;
    cout << "Функция в найденном значении x: " << f(x2) << endl;
    cout << "Итераций: " << iter << endl << endl;
}

// Комбинированный метод хорд и касательных
void combinedMethod(double a, double b, double eps) {
    if (f(a) * f(b) >= 0) {
        cout << "На отрезке [" << a << ", " << b << "] комбинированный метод не выявил корней\n";
        return;
    }

    double an = a;
    double bn = b;
    int iter = 0;

    do {
        // Метод хорд (для an)
        an = an - f(an) * (bn - an) / (f(bn) - f(an));
        
        // Метод Ньютона (для bn)
        if (fabs(f1(bn)) < 1e-10) {
            cout << "Производная близка к нулю. Метод расходится.\n";
            return;
        }
        bn = bn - f(bn) / f1(bn);
        
        iter++;
    } while (fabs(bn - an) > eps && iter < 1000);

    double root = (an + bn) / 2;
    cout << "Комбинированный метод хорд и касательных:\n";
    cout << "Корень: " << setprecision(8) << root << endl;
    cout << "Функция в найденном значении x: " << f(root) << endl;
    cout << "Итераций: " << iter << endl << endl;
}

int main() {
    setlocale(0, "ru");
    const double eps = 0.0001;

    cout << "Поиск корней уравнения 2ln^2(x) + 2x^2 - 3 = 0\n";
    cout << "Точность: " << eps << endl << endl;

    // Первый корень на [0.1, 1.0]
    cout << "----- Корень на [0.1, 1.0] -----\n";
    bisection(0.1, 1.0, eps);
    chord(0.1, 1.0, eps);
    newtonMethod(0.1, 1.0, eps);
    prostiter(0.1, 1.0, eps);
    secantMethod(0.1, 1.0, eps);
    combinedMethod(0.1, 1.0, eps);

    // Второй корень на [1.0, 1.5]
    cout << "----- Корень на [1.0, 1.5] -----\n";
    bisection(1.0, 1.5, eps);
    chord(1.0, 1.5, eps);
    newtonMethod(1.0, 1.5, eps);
    prostiter(1.0, 1.5, eps);
    secantMethod(1.0, 1.5, eps);
    combinedMethod(1.0, 1.5, eps);

    return 0;
}
