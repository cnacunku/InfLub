#define _USE_MATH_DEFIHES
#include <iostream>
#include <cmath> // Для функции sqrt
#include <locale>
#include <string>
#include <iomanip> // Для setprecision

using namespace std;

// Функция для вычисления абсолютной погрешности
double Absolute(double True, double Alm) {
    return abs(True - Alm);
}

// Функция для вычисления относительной погрешности
double Relative(double Abs, double True) {
    return (Abs / True) * 100; // В процентах
}

int decp(double ER) {
    double des = 0.1; // Начальное значение прогрессии
    int count = 0;

    // Пока значение порога больше чем ER, продолжаем делить на 10
    while (des > ER) {
        count++;
        des /= 10; // Переход к следующему разряду
    }

    return count; // Возвращаем количество нунжых цифр после запятой
}

int decz(double TrueNumber) {
    int count = 0;

    while ((int)TrueNumber != TrueNumber) {
        TrueNumber *= 10;
        count++;
    }
    return count;
}



double reduction(double number, int N) {
    double factor = pow(10, N); // Вычисляем 10 в степени N
    return round(number * factor) / factor; // Округляем и делим обратно
}

int main() {
    setlocale(LC_CTYPE, "RUS");
    
    cout << "Часть а)\n";

    double ftf, fts, Koren, FirstTrue, FirstAlm, SecondTrue, SecondAlm;

    cout << "Введите числитель первого выражения: ";
    cin >> ftf;
    cout << "Введите знаменатель первого выражения: ";
    cin >> fts;

    FirstTrue = ftf / fts;

    cout << "Введите приближенное значение для первого выражения: ";
    cin >> FirstAlm;


    cout << "Введите число под корнем второго выражения: ";
    cin >> Koren;

    SecondTrue = sqrt(Koren);

    cout << "Введите приближенное значение для второго выражения: ";
    cin >> SecondAlm;

    // Вычисление абсолютных погрешностей
    double FirstAbs = Absolute(FirstTrue, FirstAlm);
    double SecondAbs = Absolute(SecondTrue, SecondAlm);

    // Вычисление относительных погрешностей
    double FirstRel = Relative(FirstAbs, FirstTrue);
    double SecondRel = Relative(SecondAbs, SecondTrue);

    cout << fixed << setprecision(6); // Установка точности вывода

    cout << "\nДля выражения 1: " << FirstAlm << " (Истинное значение: " << FirstTrue << ")\n";
    cout << "Абсолютная погрешность: " << FirstAbs << "\n";
    cout << "Относительная погрешность: " << FirstRel << "%\n\n";

    cout << "Для выражения 2: " << SecondAlm << " (Истинное значение: " << SecondTrue << ")\n";
    cout << "Абсолютная погрешность: " << SecondAbs << "\n";
    cout << "Относительная погрешность: " << SecondRel << "%\n\n";

    // Определение более точного выражения
    if (FirstRel < SecondRel) {
        cout << "Более точное выражение: " << FirstAlm << " (Истинное значение: " << FirstTrue << ")\n";
    }
    else {
        cout << "Более точное выражение: " << SecondAlm << " (Истинное значение: " << SecondTrue << ")\n";
    }



    cout << "\n\nЧасть б)\n";

    double ini, ER;

    cout << "Введите искомое число: ";
    cin >> ini;
    cout << "Введите погрешность: ";
    cin >> ER;

    int dec_count = decp(ER);

    double TrueSigns = reduction(ini, dec_count);

    cout << "\nЧисло только с верными знаками: " << TrueSigns << "\n";
   


    cout << "\n\nЧасть в)\n";

    double TrueNum, AbsPog, OtnPog;

    cout << "Введите число, все цифры которого верны по умолчанию: ";
    cin >> TrueNum;

    int kol = decz(TrueNum);
    
    AbsPog = 1/(pow(10,kol));

    OtnPog = Relative(AbsPog, TrueNum);

    cout << "\nПредельная абсолютная погрешность: " << AbsPog<< "\n";

    cout << "\nПредельная относительная погрешность: " << OtnPog << "%\n\n";

    return 0;
}
